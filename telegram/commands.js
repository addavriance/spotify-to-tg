// telegram/commands.js - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞

import { TelegramChannel } from './channel.js';
import { createProgressBar } from '../utils.js';

export class TelegramCommands extends TelegramChannel {

    // –ö–æ–º–∞–Ω–¥–∞ /start
    async handleStartCommand(chatId, userId, origin) {
        const authUrl = `${origin}/auth?user_id=tg_${userId}`;

        const keyboard = [[
            { text: 'üéß –ü—Ä–∏–≤—è–∑–∞—Ç—å Spotify', url: authUrl },
            { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }
        ]];

        await this.sendMessageWithKeyboard(chatId, `
üéµ *Spotify Status Bot*

–û—Ç–æ–±—Ä–∞–∂–∞–π –º—É–∑—ã–∫—É –≤ –ø—Ä–æ—Ñ–∏–ª–µ Telegram —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª.

*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Ç—Ä–µ–∫–∞
‚Ä¢ –û–±–ª–æ–∂–∫–∞ –∫–∞–∫ –∞–≤–∞—Ç–∞—Ä –∫–∞–Ω–∞–ª–∞

üëá *–ù–∞—á–Ω–∏ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Spotify*
    `, keyboard);
    }

    // –ö–æ–º–∞–Ω–¥–∞ /help
    async handleHelpCommand(chatId) {
        await this.sendMessage(chatId, `
üìö *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è*

*1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Spotify*
‚Ä¢ –ù–∞–∂–º–∏ "–ü—Ä–∏–≤—è–∑–∞—Ç—å Spotify"
‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –≤ –∞–∫–∫–∞—É–Ω—Ç–µ

*2. –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞*
‚Ä¢ –°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –≤ Telegram
‚Ä¢ –î–æ–±–∞–≤—å –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∞ —Å –ø—Ä–∞–≤–∞–º–∏:
  - –ò–∑–º–µ–Ω—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞–Ω–∞–ª–∞
  - –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å: /channel @—Ç–≤–æ–π_–∫–∞–Ω–∞–ª

*3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å*
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ > –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å > –ö–∞–Ω–∞–ª

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –ø–æ–¥–∫–ª—é—á–∏—Ç—å Spotify
/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
/current - —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
/channel @username - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
/disconnect - –æ—Ç–∫–ª—é—á–∏—Ç—å
    `);
    }

    // –ö–æ–º–∞–Ω–¥–∞ /status
    async handleStatusCommand(chatId, userId, spotifyAPI) {
        const tokens = await spotifyAPI.getUserTokens(`tg_${userId}`);
        const channelData = await this.getUserChannel(`tg_${userId}`);

        if (tokens) {
            const keyboard = [[
                { text: 'üéµ –¢–µ–∫—É—â–∏–π —Ç—Ä–µ–∫', callback_data: 'current_track' },
                { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings' }
            ]];

            let channelInfo = channelData ?
                `üéØ –ö–∞–Ω–∞–ª: @${channelData.username}` :
                `‚ö†Ô∏è –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /channel`;

            await this.sendMessageWithKeyboard(chatId, `
‚úÖ *Spotify –ø–æ–¥–∫–ª—é—á–µ–Ω*

üìÖ –ü–æ–¥–∫–ª—é—á–µ–Ω: ${new Date(tokens.created_at).toLocaleDateString('ru-RU')}
${channelInfo}
üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è: –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫
      `, keyboard);
        } else {
            const authUrl = `${this.getWorkerUrl()}/auth?user_id=tg_${userId}`;
            const keyboard = [[{ text: 'üéß –ü–æ–¥–∫–ª—é—á–∏—Ç—å Spotify', url: authUrl }]];

            await this.sendMessageWithKeyboard(chatId, `
‚ùå *Spotify –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω*

–î–ª—è —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç Spotify.
      `, keyboard);
        }
    }

    // –ö–æ–º–∞–Ω–¥–∞ /current
    async handleCurrentCommand(chatId, userId, spotifyAPI) {
        try {
            const track = await spotifyAPI.getCurrentTrackForUser(`tg_${userId}`);

            if (track && track.is_playing) {
                const progressBar = createProgressBar(track.progress_ms, track.item.duration_ms);
                const artists = track.item.artists.map(a => a.name).join(', ');
                const trackName = this.escapeMarkdown(track.item.name);
                const artistsEscaped = this.escapeMarkdown(artists);

                await this.sendMessage(chatId, `
üéµ *${trackName}*
üë§ ${artistsEscaped}

\`${progressBar}\`
        `);
            } else {
                await this.sendMessage(chatId, `‚è∏Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç`);
            }
        } catch (error) {
            console.error('Current track error:', error);
            await this.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å: /start`);
        }
    }

    // –ö–æ–º–∞–Ω–¥–∞ /disconnect
    async handleDisconnectCommand(chatId, userId, spotifyAPI) {
        await spotifyAPI.removeUserTokens(`tg_${userId}`);
        await this.sendMessage(chatId, `üîå *Spotify –æ—Ç–∫–ª—é—á–µ–Ω*\n\n/start - –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∑–∞–Ω–æ–≤–æ`);
    }

    // –ö–æ–º–∞–Ω–¥–∞ /channel
    async handleChannelCommand(chatId, userId, channelUrl, spotifyAPI) {
        try {
            const channelUsername = this.extractChannelUsername(channelUrl);

            if (!channelUsername) {
                await this.sendMessage(chatId, `
‚ùå *–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞*

–§–æ—Ä–º–∞—Ç: /channel @—Ç–≤–æ–π_–∫–∞–Ω–∞–ª
–ò–ª–∏: /channel https://t.me/—Ç–≤–æ–π_–∫–∞–Ω–∞–ª
        `);
                return;
            }

            const isAdmin = await this.checkBotAdminStatus(channelUsername);
            if (!isAdmin) {
                await this.sendMessage(chatId, `
‚ùå *–ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞*

–î–æ–±–∞–≤—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª @${channelUsername} –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–∞–º–∏:
‚Ä¢ –ò–∑–º–µ–Ω—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞–Ω–∞–ª–∞
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        `);
                return;
            }

            await this.saveUserChannel(`tg_${userId}`, channelUsername);
            await this.initializeChannel(channelUsername, `tg_${userId}`, spotifyAPI);

            const keyboard = [[
                { text: 'üéµ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'update_channel' },
                { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'channel_settings' }
            ]];

            await this.sendMessageWithKeyboard(chatId, `
‚úÖ *–ö–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω*

üéØ @${channelUsername}
‚è±Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫

*–î–æ–±–∞–≤—å –∫–∞–Ω–∞–ª –≤ –ø—Ä–æ—Ñ–∏–ª—å:*
–ù–∞—Å—Ç—Ä–æ–π–∫–∏ > –ü—Ä–æ—Ñ–∏–ª—å > –ö–∞–Ω–∞–ª
      `, keyboard);

        } catch (error) {
            console.error('Channel setup error:', error);
            await this.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞`);
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    async handleSettingsCommand(chatId, userId) {
        const channelData = await this.getUserChannel(`tg_${userId}`);

        const keyboard = [
            [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞', callback_data: 'channel_settings' }],
            [{ text: 'üîå –û—Ç–∫–ª—é—á–∏—Ç—å', callback_data: 'disconnect' }],
            [{ text: 'üìñ –ü–æ–º–æ—â—å', callback_data: 'help' }]
        ];

        let info = '‚ö†Ô∏è –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
        if (channelData) {
            info = `üéØ @${channelData.username}\nüìÖ ${new Date(channelData.created_at).toLocaleDateString('ru-RU')}`;
        }

        await this.sendMessageWithKeyboard(chatId, `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n${info}`, keyboard);
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞
    async handleChannelSettings(chatId, userId) {
        const channelData = await this.getUserChannel(`tg_${userId}`);

        if (!channelData) {
            await this.sendMessage(chatId, `‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n\n–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏`);
            return;
        }

        const keyboard = [
            [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å', callback_data: 'update_channel' }],
            [{ text: 'üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', callback_data: 'create_channel_help' }]
        ];

        await this.sendMessageWithKeyboard(chatId, `
‚öôÔ∏è *–ö–∞–Ω–∞–ª @${channelData.username}*

üìÖ –°–æ–∑–¥–∞–Ω: ${new Date(channelData.created_at).toLocaleDateString('ru-RU')}
üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è: –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫
    `, keyboard);
    }

    // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∫–∞–Ω–∞–ª—É
    async handleCreateChannelHelp(chatId) {
        await this.sendMessage(chatId, `
üìö *–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞*

*–®–∞–≥–∏:*
1. Telegram > –ù–æ–≤—ã–π –∫–∞–Ω–∞–ª
2. –ü—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª —Å @username
3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ > –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
4. –î–æ–±–∞–≤–∏—Ç—å @${this.getBotUsername()}
5. –ü—Ä–∞–≤–∞: –∏–∑–º–µ–Ω—è—Ç—å –∏–Ω—Ñ–æ + —Å–æ–æ–±—â–µ–Ω–∏—è
6. –í –±–æ—Ç–µ: /channel @—Ç–≤–æ–π_–∫–∞–Ω–∞–ª

*–ü—Ä–æ—Ñ–∏–ª—å:*
–ù–∞—Å—Ç—Ä–æ–π–∫–∏ > –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å > –ö–∞–Ω–∞–ª
    `);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤—Ä—É—á–Ω—É—é
    async handleUpdateChannel(chatId, userId, spotifyAPI) {
        const channelData = await this.getUserChannel(`tg_${userId}`);

        if (!channelData) {
            await this.sendMessage(chatId, `‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
            return;
        }

        try {
            const track = await spotifyAPI.getCurrentTrackForUser(`tg_${userId}`);
            await this.updateChannelContent(`tg_${userId}`, track);
            await this.sendMessage(chatId, '‚úÖ –ö–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω');
        } catch (error) {
            await this.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    async handleUnknownCommand(chatId) {
        await this.sendMessage(chatId, `
ü§ñ *–ö–æ–º–∞–Ω–¥—ã:*

/start - –ø–æ–¥–∫–ª—é—á–∏—Ç—å Spotify
/help - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
/status - —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
/current - —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
/channel @username - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª
/disconnect - –æ—Ç–∫–ª—é—á–∏—Ç—å

‚ùì /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π
    `);
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    async notifyConnectionSuccess(userId) {
        const keyboard = [
            [{ text: 'üìñ –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª?', callback_data: 'create_channel_help' }],
            [{ text: 'üéµ –¢–µ–∫—É—â–∏–π —Ç—Ä–µ–∫', callback_data: 'current_track' }]
        ];

        await this.sendMessageWithKeyboard(userId, `
üéâ *Spotify –ø–æ–¥–∫–ª—é—á–µ–Ω!*

‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫

*–¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–π –∫–∞–Ω–∞–ª:*
1. –ù–æ–≤—ã–π –∫–∞–Ω–∞–ª –≤ Telegram
2. –î–æ–±–∞–≤—å @${this.getBotUsername()} –∫–∞–∫ –∞–¥–º–∏–Ω–∞
3. /channel @—Ç–≤–æ–π_–∫–∞–Ω–∞–ª

üéß –í–∫–ª—é—á–∏ –º—É–∑—ã–∫—É –≤ Spotify!
    `, keyboard);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ URL –≤–æ—Ä–∫–µ—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞)
    getWorkerUrl() {
        return 'https://your-worker.your-subdomain.workers.dev';
    }
}
