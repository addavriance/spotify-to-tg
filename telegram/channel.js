// telegram/channel.js - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ Telegram

import { TelegramAPI } from './base.js';
import { createProgressBar } from '../utils.js';

export class TelegramChannel extends TelegramAPI {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
    async updateChannelTitle(channelUsername, title) {
        const url = `https://api.telegram.org/bot${this.token}/setChatTitle`;

        try {
            await fetch(url, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    chat_id: `@${channelUsername}`,
                    title: title
                })
            });
        } catch (error) {
            console.error('Title update error:', error);
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∫–∞–Ω–∞–ª–∞
    async updateChannelPhoto(channelUsername, photoUrl) {
        try {
            // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            const imageResponse = await fetch(photoUrl);
            const imageBuffer = await imageResponse.arrayBuffer();

            // –°–æ–∑–¥–∞–µ–º form data
            const formData = new FormData();
            formData.append('chat_id', `@${channelUsername}`);
            formData.append('photo', new Blob([imageBuffer], { type: 'image/jpeg' }), 'cover.jpg');

            const url = `https://api.telegram.org/bot${this.token}/setChatPhoto`;

            await fetch(url, {
                method: 'POST',
                body: formData
            });
        } catch (error) {
            console.error('Photo update error:', error);
        }
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —Ñ–æ—Ç–æ (–±–µ–ª–æ–≥–æ)
    async setDefaultChannelPhoto(channelUsername) {
        try {
            // –°–æ–∑–¥–∞–µ–º –±–µ–ª–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 512x512
            const canvas = new OffscreenCanvas(512, 512);
            const ctx = canvas.getContext('2d');
            ctx.fillStyle = '#FFFFFF';
            ctx.fillRect(0, 0, 512, 512);

            const blob = await canvas.convertToBlob({ type: 'image/png' });

            const formData = new FormData();
            formData.append('chat_id', `@${channelUsername}`);
            formData.append('photo', blob, 'default.png');

            const url = `https://api.telegram.org/bot${this.token}/setChatPhoto`;

            await fetch(url, {
                method: 'POST',
                body: formData
            });
        } catch (error) {
            console.error('Default photo error:', error);
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    async sendProgressMessage(channelUsername, progressText) {
        const url = `https://api.telegram.org/bot${this.token}/sendMessage`;

        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    chat_id: `@${channelUsername}`,
                    text: progressText || '\u200B', // –ù–µ–≤–∏–¥–∏–º—ã–π —Å–∏–º–≤–æ–ª –µ—Å–ª–∏ –ø—É—Å—Ç–æ
                    parse_mode: 'Markdown'
                })
            });

            const data = await response.json();
            return data.result?.message_id;
        } catch (error) {
            console.error('Send progress message error:', error);
            return null;
        }
    }

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    async editProgressMessage(channelUsername, messageId, progressText) {
        await this.editMessage(`@${channelUsername}`, messageId, progressText || '\u200B');
    }

    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ–∫—Ä—É–≥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    async cleanupChannelMessages(channelUsername, lastMessageId) {
        if (!lastMessageId) return;

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ¬±5 –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ ID
        const promises = [];

        for (let offset = -5; offset <= 5; offset++) {
            const messageId = lastMessageId + offset;
            if (messageId > 0 && messageId !== lastMessageId) { // –ù–µ —É–¥–∞–ª—è–µ–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
                promises.push(this.deleteMessage(`@${channelUsername}`, messageId));
            }
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        await Promise.allSettled(promises);

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—á–Ω–æ –ø—Ä–æ—à–ª–∏
        await new Promise(resolve => setTimeout(resolve, 300));
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Ç—Ä–µ–∫–æ–º
    async updateChannelWithTrack(channelUsername, track) {
        const artists = track.item.artists.map(a => a.name).join(', ');
        const title = `üéµ ${track.item.name} - ${artists}`;

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        await this.updateChannelTitle(channelUsername, title);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –∫–∞–Ω–∞–ª–∞ (–æ–±–ª–æ–∂–∫–∞ —Ç—Ä–µ–∫–∞) —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (track.item.album.images && track.item.album.images.length > 0) {
            const coverUrl = track.item.album.images[0].url;
            await this.updateChannelPhoto(channelUsername, coverUrl);
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∫–æ–≥–¥–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç
    async updateChannelWithNoMusic(channelUsername) {
        // –ú–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ "–Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç"
        await this.updateChannelTitle(channelUsername, '‚è∏Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç');

        // –°—Ç–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∞–≤–∞—Ç–∞—Ä–∫—É
        await this.setDefaultChannelPhoto(channelUsername);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ —Å –ø–µ—Ä–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    async initializeChannel(channelUsername, userId, spotifyAPI) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
            const track = await spotifyAPI.getCurrentTrackForUser(userId);

            if (track && track.is_playing) {
                // –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫
                await this.updateChannelWithTrack(channelUsername, track);
            } else {
                // –ù–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç
                await this.updateChannelWithNoMusic(channelUsername);
            }

            const progressText = track && track.is_playing ?
                createProgressBar(track.progress_ms, track.item.duration_ms) : '';

            // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
            const messageId = await this.sendProgressMessage(channelUsername, progressText);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            await this.saveChannelData(userId, channelUsername, messageId, track);

        } catch (error) {
            console.error('Channel initialization error:', error);
        }
    }

    // –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ö–û–ù–¢–ï–ù–¢–ê –ö–ê–ù–ê–õ–ê –° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ï–ô
    async updateChannelContent(userId, track) {
        const channelData = await this.getUserChannel(userId);

        if (!channelData) {
            console.log(`No channel data for user ${userId}`);
            return;
        }

        const { username: channelUsername, message_id: lastMessageId, last_track_id, last_track_image } = channelData;

        if (track && track.is_playing) {
            // –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫
            console.log(`Updating channel @${channelUsername} with track: ${track.item.name}`);

            const currentTrackId = track.item.id;
            const currentTrackImage = track.item.album.images?.[0]?.url;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç—Ä–µ–∫ (—Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ñ–æ—Ç–æ)
            const trackChanged = currentTrackId !== last_track_id;

            if (trackChanged) {
                console.log(`Track changed for user ${userId}, updating channel info`);

                // 1. –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
                await this.updateChannelWithTrack(channelUsername, track);

                // 2. –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                if (currentTrackImage && currentTrackImage !== last_track_image) {
                    console.log(`Album cover changed, updating channel photo`);
                    await this.updateChannelPhoto(channelUsername, currentTrackImage);
                }

                // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
                await this.updateLastTrackInfo(userId, track);

                // 4. –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
                await new Promise(resolve => setTimeout(resolve, 1000));

                // 5. –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏—è/—Ñ–æ—Ç–æ)
                await this.cleanupChannelMessages(channelUsername, lastMessageId);
            }

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞)
            const progressBar = createProgressBar(track.progress_ms, track.item.duration_ms);

            if (lastMessageId) {
                // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await this.editProgressMessage(channelUsername, lastMessageId, `\`${progressBar}\``);
            } else {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ ID –ø–æ—Ç–µ—Ä—è–ª—Å—è
                const newMessageId = await this.sendProgressMessage(channelUsername, `\`${progressBar}\``);
                if (newMessageId) {
                    await this.updateChannelMessageId(userId, newMessageId);
                }
            }

        } else {
            // –ù–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç
            console.log(`Clearing channel @${channelUsername} - no music playing`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ç—Ä–µ–∫ (—á—Ç–æ–±—ã –Ω–µ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–Ω–∞–ª –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
            if (last_track_id !== null) {
                console.log(`Music stopped for user ${userId}, updating channel to "no music"`);

                // 1. –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –Ω–∞ "–Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç"
                await this.updateChannelWithNoMusic(channelUsername);

                // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º —á—Ç–æ —Ç—Ä–µ–∫–∞ –Ω–µ—Ç
                await this.updateLastTrackInfo(userId, null);

                // 3. –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
                await new Promise(resolve => setTimeout(resolve, 1000));

                // 4. –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                await this.cleanupChannelMessages(channelUsername, lastMessageId);
            }

            if (lastMessageId) {
                // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø—É—Å—Ç–æ–µ
                await this.editProgressMessage(channelUsername, lastMessageId, '\u200B');
            } else {
                // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                const newMessageId = await this.sendProgressMessage(channelUsername, '\u200B');
                if (newMessageId) {
                    await this.updateChannelMessageId(userId, newMessageId);
                }
            }
        }
    }

    // --- –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞ ---

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async saveChannelData(userId, channelUsername, messageId, currentTrack) {
        const channelData = {
            username: channelUsername,
            created_at: Date.now(),
            message_id: messageId,
            last_track_id: currentTrack?.item?.id || null,
            last_track_image: currentTrack?.item?.album?.images?.[0]?.url || null
        };

        await this.env.TOKENS.put(`channel:${userId}`, JSON.stringify(channelData));
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞
    async updateChannelMessageId(userId, messageId) {
        const channelData = await this.env.TOKENS.get(`channel:${userId}`, 'json') || {};
        channelData.message_id = messageId;
        await this.env.TOKENS.put(`channel:${userId}`, JSON.stringify(channelData));
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ç—Ä–µ–∫–µ
    async updateLastTrackInfo(userId, track) {
        const channelData = await this.env.TOKENS.get(`channel:${userId}`, 'json') || {};
        channelData.last_track_id = track?.item?.id || null;
        channelData.last_track_image = track?.item?.album?.images?.[0]?.url || null;
        await this.env.TOKENS.put(`channel:${userId}`, JSON.stringify(channelData));
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    async saveUserChannel(userId, channelUsername) {
        await this.env.TOKENS.put(`channel:${userId}`, JSON.stringify({
            username: channelUsername,
            created_at: Date.now(),
            message_id: null,
            last_track_id: null,
            last_track_image: null
        }));
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getUserChannel(userId) {
        return await this.env.TOKENS.get(`channel:${userId}`, 'json');
    }
}
